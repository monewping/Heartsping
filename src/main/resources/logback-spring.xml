<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 
    Logback 설정 파일
    - 로그 출력 방식을 정의하는 Spring Boot의 로깅 프레임워크 설정
    - 콘솔과 파일 두 곳에 로그를 출력하도록 구성
    -->

    <!-- 로그 파일이 저장될 경로와 파일명 설정 -->
    <property name="LOG_PATH" value="./logs"/>
    <property name="LOG_FILE_NAME" value="monewping"/>

    <!-- 
    콘솔 출력 패턴 설정
    - %d{yyyy-MM-dd HH:mm:ss.SSS}: 날짜와 시간 (밀리초까지)
    - [%thread]: 현재 실행 중인 스레드명
    - %highlight(%-5level): 로그 레벨 (INFO, ERROR 등) - 색상 강조
    - %yellow(%logger{36}): 로거명 (클래스명) - 노란색으로 표시
    - %X{traceId:-N/A}: MDC에서 가져온 traceId (없으면 N/A)
    - %X{remoteAddr:-N/A}: MDC에서 가져온 클라이언트 IP 주소 (없으면 N/A)
    - %X{url:-N/A}: MDC에서 가져온 URL (없으면 N/A)
    - %X{method:-N/A}: MDC에서 가져온 HTTP 메서드 (없으면 N/A)
    - %msg: 실제 로그 메시지
    - %n: 줄바꿈
    -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %yellow(%logger{36}) - [traceId=%X{traceId:-N/A}, ip=%X{remoteAddr:-N/A}, url=%X{url:-N/A}, method=%X{method:-N/A}] %msg%n"/>

    <!-- 
    파일 출력 패턴 설정
    - 콘솔과 동일하지만 색상 강조 없이 일반 텍스트로 저장
    - 파일에는 색상 코드가 필요 없으므로 highlight, yellow 제거
    - IP 주소 정보도 포함
    -->
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - [traceId=%X{traceId:-N/A}, ip=%X{remoteAddr:-N/A}, url=%X{url:-N/A}, method=%X{method:-N/A}] %msg%n"/>

    <!-- 
    콘솔 Appender 설정
    - 로그를 콘솔(터미널)에 출력하는 설정
    - 개발 시 실시간으로 로그를 확인할 수 있음
    -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 
    파일 Appender 설정 (RollingFileAppender)
    - 로그를 파일에 저장하는 설정
    - RollingFileAppender: 파일 크기나 날짜에 따라 자동으로 새 파일 생성
    -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 로그 파일의 위치와 이름 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 
        RollingPolicy: 파일 롤링(교체) 정책 설정
        - TimeBasedRollingPolicy: 시간 기반으로 파일 교체
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 
            fileNamePattern: 새 파일명 패턴
            - %d{yyyy-MM-dd}: 날짜별로 새 파일 생성
            - %i: 같은 날짜에 여러 파일이 있을 때 번호 추가 (현재 주석처리됨)
            -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 
            SizeAndTimeBasedFNATP: 파일 크기와 시간 모두 고려한 롤링
            - maxFileSize: 파일당 최대 크기 제한 (보관할 로그 파일 수를 30개로 설정해서, 30일에 정확히 30개 정도 로그파일을 쌓기 위해 테스트 배포지만 20MB로 넉넉히 설정)
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>20MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 
            maxHistory: 보관할 로그 파일 개수
            - 30일치 로그 파일만 보관하고 나머지는 자동 삭제
            -->
            <maxHistory>30</maxHistory>
            <!-- 
            totalSizeCap: 전체 로그 파일의 최대 크기 제한 (현재 설정상 30일에 최대 600MB이기 때문에 주석처리)
            - 1GB를 초과하면 오래된 파일부터 삭제
            -->
            <!--            <totalSizeCap>1GB</totalSizeCap>-->
        </rollingPolicy>
    </appender>

    <!-- 
    특정 패키지별 로그 레벨 설정
    - 개발 중에는 DEBUG 레벨로 상세 로그 확인
    - 운영 시에는 INFO 레벨로 변경
    -->
    <logger name="org.project.monewping" level="DEBUG"/>
    <logger name="org.springframework.web" level="INFO"/>
    <logger name="org.hibernate.SQL" level="DEBUG"/>
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE"/>

    <!-- 
    루트 로거 설정
    - 모든 로거의 기본 설정 (설정하지 않은 모든 로그의 규칙)
    - level="INFO": INFO 레벨 이상의 로그만 출력 (DEBUG는 제외)
    - CONSOLE과 FILE 두 곳에 모두 로그 출력
    -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>

</configuration>