plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'org.project'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Case문 프리뷰
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['--enable-preview']
    options.release = 17
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    // AWS
    implementation platform('software.amazon.awssdk:bom:2.21.29')
    // Amazon S3 파일 업로드/다운로드/삭제 기능을 위한 클라이언트 라이브러리
    implementation 'software.amazon.awssdk:s3:2.31.7'
    implementation 'software.amazon.awssdk:rds'
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:aws-core'
    implementation 'software.amazon.awssdk:regions'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Jaro Winkler 유사도 계산 의존성
    implementation 'org.apache.commons:commons-text:1.11.0'
    // MongoDB (개발/운영용)
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Querydsl 설정
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // 테스트가 성공하든 실패하든 항상 JaCoCo 리포트를 생성
}

jacoco {
    toolVersion = "0.8.10" // JaCoCo 버전 설정
}

def jacocoExcludePatterns = [
    "**/*Request.class",
    "**/*Response.class", 
    "**/*Mapper*.class",
    "**/*MapperImpl*.class",
    "org/project/monewping/domain/*/domain/**",
    "org/project/monewping/global/**",
    "org/project/monewping/MonewpingApplication.class"
]

afterEvaluate {
    // JaCoCo 리포트 설정
    jacocoTestReport {
        dependsOn test // test 태스크가 실행된 후에 실행
        reports {
            xml.required = true // CI/CD 환경에서 사용
            html.required = true // 개발자가 로컬에서 확인할 수 있는 HTML 리포트를 생성
        }
        
        // 커버리지 측정에서 제외할 파일들을 지정합니다.
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludePatterns)
        }))
    }
    
    // JaCoCo 커버리지 검증 설정
    tasks.named("jacocoTestCoverageVerification", JacocoCoverageVerification) {
        dependsOn jacocoTestReport // 리포트가 생성된 후 검증을 수행

        // jacocoTestReport와 동일한 classDirectories 사용 (중복 제거)
        classDirectories.setFrom(jacocoTestReport.classDirectories)

        violationRules {
            rule {
                element = 'BUNDLE'
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.80 // 라인 커버리지 최소 비율을 80%로 설정
                }
            }
        }
    }
}

// Q객체 생성 위치 경로 지정
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main {
        java {
            srcDir querydslDir
            srcDir 'build/generated/sources/annotationProcessor/java/main'
        }
    }
}

tasks.check {
    dependsOn tasks.named("jacocoTestCoverageVerification")
}

